{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b416e3fb",
   "metadata": {
    "papermill": {
     "duration": 0.003508,
     "end_time": "2025-01-04T09:08:08.928007",
     "exception": false,
     "start_time": "2025-01-04T09:08:08.924499",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# R Assignment, Jane street Market prediction , by Abhishek Thomas \n",
    "\n",
    "## Introduction\n",
    "\n",
    "#### **Goal of the Challenge:**\n",
    "- Predict the value of **`responder_6`**, which represents an anonymized market response, for up to **six months into the future**.\n",
    "- The responder values are clipped between `-5` and `5`, where the magnitude indicates the **strength of the response**.\n",
    "- Predictions are made in **real-time** using a provided **evaluation API** that serves data timestep-by-timestep.\n",
    "\n",
    "---\n",
    "\n",
    "### **Overview of the Datasets:**\n",
    "\n",
    "1. **`train.parquet`**:\n",
    "   - **Historical training data** with features and responder values.\n",
    "   - Contains **79 features (`feature_00` to `feature_78`)** representing market conditions.\n",
    "   - **9 responders (`responder_0` to `responder_8`)**, with `responder_6` being the target to predict.\n",
    "   - Indexed by **`date_id`** and **`time_id`** (representing unique timestamps).\n",
    "   - **`symbol_id`** indicates the financial instrument.\n",
    "\n",
    "2. **`test.parquet`**:\n",
    "   - A **mock test set** that represents the structure of the real-time test set.\n",
    "   - Only used to debug or verify the submission format.\n",
    "\n",
    "3. **`lags.parquet`**:\n",
    "   - Contains **lagged values** of the responders from the previous `date_id`.\n",
    "   - Provides the entire previous day's responder values at the first `time_id` of each new day.\n",
    "\n",
    "4. **`features.csv`**:\n",
    "   - Provides **metadata for the 79 features**, tagging each feature with binary tags (e.g., `tag_0`, `tag_1`) that describe their properties.\n",
    "\n",
    "5. **`responders.csv`**:\n",
    "   - Provides **metadata** about the 9 responders.\n",
    "\n",
    "6. **`sample_submission.csv`**:\n",
    "   - An example of the expected **submission format**, showing how your predictions should be structured.\n",
    "\n",
    "---\n",
    "\n",
    "### **Key Points:**\n",
    "- Each row in `train.parquet` corresponds to a **unique combination of `symbol_id`, `date_id`, and `time_id`**.\n",
    "- The **evaluation API** serves test data step-by-step and expects predictions at every timestep, but only predictions for the **private test set** are scored.\n",
    "- The **features** provide anonymized market signals, and the **responders** (especially `responder_6`) indicate what actions should be taken based on those signals.\n",
    "\n",
    "---\n",
    "\n",
    "## **Notebook objective:**\n",
    "- Explore all the datasets, do an EDA and understand how to preprocess the data since we have 47m rows in our training data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b35d7975",
   "metadata": {
    "papermill": {
     "duration": 0.002766,
     "end_time": "2025-01-04T09:08:08.933832",
     "exception": false,
     "start_time": "2025-01-04T09:08:08.931066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "37d2b02f",
   "metadata": {
    "_execution_state": "idle",
    "_uuid": "051d70d956493feee0c6d64651c6a088724dca2a",
    "execution": {
     "iopub.execute_input": "2025-01-04T09:08:08.945630Z",
     "iopub.status.busy": "2025-01-04T09:08:08.942905Z",
     "iopub.status.idle": "2025-01-04T09:08:10.592305Z",
     "shell.execute_reply": "2025-01-04T09:08:10.590402Z"
    },
    "papermill": {
     "duration": 1.65851,
     "end_time": "2025-01-04T09:08:10.595090",
     "exception": false,
     "start_time": "2025-01-04T09:08:08.936580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "── \u001b[1mAttaching core tidyverse packages\u001b[22m ──────────────────────── tidyverse 2.0.0 ──\n",
      "\u001b[32m✔\u001b[39m \u001b[34mforcats  \u001b[39m 1.0.0     \u001b[32m✔\u001b[39m \u001b[34mstringr  \u001b[39m 1.5.1\n",
      "\u001b[32m✔\u001b[39m \u001b[34mlubridate\u001b[39m 1.9.3     \u001b[32m✔\u001b[39m \u001b[34mtibble   \u001b[39m 3.2.1\n",
      "\u001b[32m✔\u001b[39m \u001b[34mpurrr    \u001b[39m 1.0.2     \u001b[32m✔\u001b[39m \u001b[34mtidyr    \u001b[39m 1.3.1\n",
      "\u001b[32m✔\u001b[39m \u001b[34mreadr    \u001b[39m 2.1.5     \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "── \u001b[1mConflicts\u001b[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n",
      "\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mfilter()\u001b[39m masks \u001b[34mstats\u001b[39m::filter()\n",
      "\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mlag()\u001b[39m    masks \u001b[34mstats\u001b[39m::lag()\n",
      "\u001b[36mℹ\u001b[39m Use the conflicted package (\u001b[3m\u001b[34m<http://conflicted.r-lib.org/>\u001b[39m\u001b[23m) to force all conflicts to become errors\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "'jane-street-real-time-market-data-forecasting'"
      ],
      "text/latex": [
       "'jane-street-real-time-market-data-forecasting'"
      ],
      "text/markdown": [
       "'jane-street-real-time-market-data-forecasting'"
      ],
      "text/plain": [
       "[1] \"jane-street-real-time-market-data-forecasting\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This R environment comes with many helpful analytics packages installed\n",
    "# It is defined by the kaggle/rstats Docker image: https://github.com/kaggle/docker-rstats\n",
    "# For example, here's a helpful package to load\n",
    "library(ggplot2)\n",
    "library(reshape2)\n",
    "library(dplyr)\n",
    "library(tidyverse) # metapackage of all tidyverse packages\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "list.files(path = \"../input\")\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4ef2569d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-04T09:08:10.636926Z",
     "iopub.status.busy": "2025-01-04T09:08:10.604224Z",
     "iopub.status.idle": "2025-01-04T09:08:10.664295Z",
     "shell.execute_reply": "2025-01-04T09:08:10.662456Z"
    },
    "papermill": {
     "duration": 0.068271,
     "end_time": "2025-01-04T09:08:10.666968",
     "exception": false,
     "start_time": "2025-01-04T09:08:10.598697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'../input/jane-street-real-time-market-data-forecasting/features.csv'</li><li>'../input/jane-street-real-time-market-data-forecasting/kaggle_evaluation'</li><li>'../input/jane-street-real-time-market-data-forecasting/lags.parquet'</li><li>'../input/jane-street-real-time-market-data-forecasting/responders.csv'</li><li>'../input/jane-street-real-time-market-data-forecasting/sample_submission.csv'</li><li>'../input/jane-street-real-time-market-data-forecasting/test.parquet'</li><li>'../input/jane-street-real-time-market-data-forecasting/train.parquet'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '../input/jane-street-real-time-market-data-forecasting/features.csv'\n",
       "\\item '../input/jane-street-real-time-market-data-forecasting/kaggle\\_evaluation'\n",
       "\\item '../input/jane-street-real-time-market-data-forecasting/lags.parquet'\n",
       "\\item '../input/jane-street-real-time-market-data-forecasting/responders.csv'\n",
       "\\item '../input/jane-street-real-time-market-data-forecasting/sample\\_submission.csv'\n",
       "\\item '../input/jane-street-real-time-market-data-forecasting/test.parquet'\n",
       "\\item '../input/jane-street-real-time-market-data-forecasting/train.parquet'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '../input/jane-street-real-time-market-data-forecasting/features.csv'\n",
       "2. '../input/jane-street-real-time-market-data-forecasting/kaggle_evaluation'\n",
       "3. '../input/jane-street-real-time-market-data-forecasting/lags.parquet'\n",
       "4. '../input/jane-street-real-time-market-data-forecasting/responders.csv'\n",
       "5. '../input/jane-street-real-time-market-data-forecasting/sample_submission.csv'\n",
       "6. '../input/jane-street-real-time-market-data-forecasting/test.parquet'\n",
       "7. '../input/jane-street-real-time-market-data-forecasting/train.parquet'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"../input/jane-street-real-time-market-data-forecasting/features.csv\"         \n",
       "[2] \"../input/jane-street-real-time-market-data-forecasting/kaggle_evaluation\"    \n",
       "[3] \"../input/jane-street-real-time-market-data-forecasting/lags.parquet\"         \n",
       "[4] \"../input/jane-street-real-time-market-data-forecasting/responders.csv\"       \n",
       "[5] \"../input/jane-street-real-time-market-data-forecasting/sample_submission.csv\"\n",
       "[6] \"../input/jane-street-real-time-market-data-forecasting/test.parquet\"         \n",
       "[7] \"../input/jane-street-real-time-market-data-forecasting/train.parquet\"        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "list.files(path = \"../input/jane-street-real-time-market-data-forecasting\", full.names = TRUE)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0282f7ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-04T09:08:10.679054Z",
     "iopub.status.busy": "2025-01-04T09:08:10.677380Z",
     "iopub.status.idle": "2025-01-04T09:08:10.777398Z",
     "shell.execute_reply": "2025-01-04T09:08:10.775383Z"
    },
    "papermill": {
     "duration": 0.109348,
     "end_time": "2025-01-04T09:08:10.780044",
     "exception": false,
     "start_time": "2025-01-04T09:08:10.670696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'features.csv'</li><li>'kaggle_evaluation/__init__.py'</li><li>'kaggle_evaluation/core/__init__.py'</li><li>'kaggle_evaluation/core/base_gateway.py'</li><li>'kaggle_evaluation/core/generated/__init__.py'</li><li>'kaggle_evaluation/core/generated/kaggle_evaluation_pb2_grpc.py'</li><li>'kaggle_evaluation/core/generated/kaggle_evaluation_pb2.py'</li><li>'kaggle_evaluation/core/kaggle_evaluation.proto'</li><li>'kaggle_evaluation/core/relay.py'</li><li>'kaggle_evaluation/core/templates.py'</li><li>'kaggle_evaluation/jane_street_gateway.py'</li><li>'kaggle_evaluation/jane_street_inference_server.py'</li><li>'lags.parquet/date_id=0/part-0.parquet'</li><li>'responders.csv'</li><li>'sample_submission.csv'</li><li>'test.parquet/date_id=0/part-0.parquet'</li><li>'train.parquet/partition_id=0/part-0.parquet'</li><li>'train.parquet/partition_id=1/part-0.parquet'</li><li>'train.parquet/partition_id=2/part-0.parquet'</li><li>'train.parquet/partition_id=3/part-0.parquet'</li><li>'train.parquet/partition_id=4/part-0.parquet'</li><li>'train.parquet/partition_id=5/part-0.parquet'</li><li>'train.parquet/partition_id=6/part-0.parquet'</li><li>'train.parquet/partition_id=7/part-0.parquet'</li><li>'train.parquet/partition_id=8/part-0.parquet'</li><li>'train.parquet/partition_id=9/part-0.parquet'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'features.csv'\n",
       "\\item 'kaggle\\_evaluation/\\_\\_init\\_\\_.py'\n",
       "\\item 'kaggle\\_evaluation/core/\\_\\_init\\_\\_.py'\n",
       "\\item 'kaggle\\_evaluation/core/base\\_gateway.py'\n",
       "\\item 'kaggle\\_evaluation/core/generated/\\_\\_init\\_\\_.py'\n",
       "\\item 'kaggle\\_evaluation/core/generated/kaggle\\_evaluation\\_pb2\\_grpc.py'\n",
       "\\item 'kaggle\\_evaluation/core/generated/kaggle\\_evaluation\\_pb2.py'\n",
       "\\item 'kaggle\\_evaluation/core/kaggle\\_evaluation.proto'\n",
       "\\item 'kaggle\\_evaluation/core/relay.py'\n",
       "\\item 'kaggle\\_evaluation/core/templates.py'\n",
       "\\item 'kaggle\\_evaluation/jane\\_street\\_gateway.py'\n",
       "\\item 'kaggle\\_evaluation/jane\\_street\\_inference\\_server.py'\n",
       "\\item 'lags.parquet/date\\_id=0/part-0.parquet'\n",
       "\\item 'responders.csv'\n",
       "\\item 'sample\\_submission.csv'\n",
       "\\item 'test.parquet/date\\_id=0/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=0/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=1/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=2/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=3/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=4/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=5/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=6/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=7/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=8/part-0.parquet'\n",
       "\\item 'train.parquet/partition\\_id=9/part-0.parquet'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'features.csv'\n",
       "2. 'kaggle_evaluation/__init__.py'\n",
       "3. 'kaggle_evaluation/core/__init__.py'\n",
       "4. 'kaggle_evaluation/core/base_gateway.py'\n",
       "5. 'kaggle_evaluation/core/generated/__init__.py'\n",
       "6. 'kaggle_evaluation/core/generated/kaggle_evaluation_pb2_grpc.py'\n",
       "7. 'kaggle_evaluation/core/generated/kaggle_evaluation_pb2.py'\n",
       "8. 'kaggle_evaluation/core/kaggle_evaluation.proto'\n",
       "9. 'kaggle_evaluation/core/relay.py'\n",
       "10. 'kaggle_evaluation/core/templates.py'\n",
       "11. 'kaggle_evaluation/jane_street_gateway.py'\n",
       "12. 'kaggle_evaluation/jane_street_inference_server.py'\n",
       "13. 'lags.parquet/date_id=0/part-0.parquet'\n",
       "14. 'responders.csv'\n",
       "15. 'sample_submission.csv'\n",
       "16. 'test.parquet/date_id=0/part-0.parquet'\n",
       "17. 'train.parquet/partition_id=0/part-0.parquet'\n",
       "18. 'train.parquet/partition_id=1/part-0.parquet'\n",
       "19. 'train.parquet/partition_id=2/part-0.parquet'\n",
       "20. 'train.parquet/partition_id=3/part-0.parquet'\n",
       "21. 'train.parquet/partition_id=4/part-0.parquet'\n",
       "22. 'train.parquet/partition_id=5/part-0.parquet'\n",
       "23. 'train.parquet/partition_id=6/part-0.parquet'\n",
       "24. 'train.parquet/partition_id=7/part-0.parquet'\n",
       "25. 'train.parquet/partition_id=8/part-0.parquet'\n",
       "26. 'train.parquet/partition_id=9/part-0.parquet'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"features.csv\"                                                  \n",
       " [2] \"kaggle_evaluation/__init__.py\"                                 \n",
       " [3] \"kaggle_evaluation/core/__init__.py\"                            \n",
       " [4] \"kaggle_evaluation/core/base_gateway.py\"                        \n",
       " [5] \"kaggle_evaluation/core/generated/__init__.py\"                  \n",
       " [6] \"kaggle_evaluation/core/generated/kaggle_evaluation_pb2_grpc.py\"\n",
       " [7] \"kaggle_evaluation/core/generated/kaggle_evaluation_pb2.py\"     \n",
       " [8] \"kaggle_evaluation/core/kaggle_evaluation.proto\"                \n",
       " [9] \"kaggle_evaluation/core/relay.py\"                               \n",
       "[10] \"kaggle_evaluation/core/templates.py\"                           \n",
       "[11] \"kaggle_evaluation/jane_street_gateway.py\"                      \n",
       "[12] \"kaggle_evaluation/jane_street_inference_server.py\"             \n",
       "[13] \"lags.parquet/date_id=0/part-0.parquet\"                         \n",
       "[14] \"responders.csv\"                                                \n",
       "[15] \"sample_submission.csv\"                                         \n",
       "[16] \"test.parquet/date_id=0/part-0.parquet\"                         \n",
       "[17] \"train.parquet/partition_id=0/part-0.parquet\"                   \n",
       "[18] \"train.parquet/partition_id=1/part-0.parquet\"                   \n",
       "[19] \"train.parquet/partition_id=2/part-0.parquet\"                   \n",
       "[20] \"train.parquet/partition_id=3/part-0.parquet\"                   \n",
       "[21] \"train.parquet/partition_id=4/part-0.parquet\"                   \n",
       "[22] \"train.parquet/partition_id=5/part-0.parquet\"                   \n",
       "[23] \"train.parquet/partition_id=6/part-0.parquet\"                   \n",
       "[24] \"train.parquet/partition_id=7/part-0.parquet\"                   \n",
       "[25] \"train.parquet/partition_id=8/part-0.parquet\"                   \n",
       "[26] \"train.parquet/partition_id=9/part-0.parquet\"                   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "list.files(path = \"../input/jane-street-real-time-market-data-forecasting\", recursive = TRUE)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f13613be",
   "metadata": {
    "papermill": {
     "duration": 0.003978,
     "end_time": "2025-01-04T09:08:10.788245",
     "exception": false,
     "start_time": "2025-01-04T09:08:10.784267",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9453df87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-04T08:29:44.456239Z",
     "iopub.status.busy": "2025-01-04T08:29:44.454602Z",
     "iopub.status.idle": "2025-01-04T08:29:44.466919Z",
     "shell.execute_reply": "2025-01-04T08:29:44.465219Z"
    },
    "papermill": {
     "duration": 0.003716,
     "end_time": "2025-01-04T09:08:10.795745",
     "exception": false,
     "start_time": "2025-01-04T09:08:10.792029",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Features.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5288112f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-04T09:08:10.807106Z",
     "iopub.status.busy": "2025-01-04T09:08:10.805420Z",
     "iopub.status.idle": "2025-01-04T09:08:11.820295Z",
     "shell.execute_reply": "2025-01-04T09:08:11.817167Z"
    },
    "papermill": {
     "duration": 1.024428,
     "end_time": "2025-01-04T09:08:11.823889",
     "exception": false,
     "start_time": "2025-01-04T09:08:10.799461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step 1: Dimensions of the dataset (rows, columns): 79 18 \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 5 rows of the dataset:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 5 × 18</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>feature</th><th scope=col>tag_0</th><th scope=col>tag_1</th><th scope=col>tag_2</th><th scope=col>tag_3</th><th scope=col>tag_4</th><th scope=col>tag_5</th><th scope=col>tag_6</th><th scope=col>tag_7</th><th scope=col>tag_8</th><th scope=col>tag_9</th><th scope=col>tag_10</th><th scope=col>tag_11</th><th scope=col>tag_12</th><th scope=col>tag_13</th><th scope=col>tag_14</th><th scope=col>tag_15</th><th scope=col>tag_16</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>feature_00</td><td>false</td><td>false</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true </td><td>false</td><td>true</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>feature_01</td><td>false</td><td>false</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true </td><td>true </td><td>false</td><td>true</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>feature_02</td><td>false</td><td>false</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true </td><td>false</td><td>false</td><td>false</td><td>true</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>feature_03</td><td>false</td><td>false</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true </td><td>false</td><td>false</td><td>true</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>feature_04</td><td>false</td><td>false</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true </td><td>true </td><td>false</td><td>false</td><td>true</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 5 × 18\n",
       "\\begin{tabular}{r|llllllllllllllllll}\n",
       "  & feature & tag\\_0 & tag\\_1 & tag\\_2 & tag\\_3 & tag\\_4 & tag\\_5 & tag\\_6 & tag\\_7 & tag\\_8 & tag\\_9 & tag\\_10 & tag\\_11 & tag\\_12 & tag\\_13 & tag\\_14 & tag\\_15 & tag\\_16\\\\\n",
       "  & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr> & <chr>\\\\\n",
       "\\hline\n",
       "\t1 & feature\\_00 & false & false & true & false & false & false & false & false & false & false & false & false & false & false & true  & false & true\\\\\n",
       "\t2 & feature\\_01 & false & false & true & false & false & false & false & false & false & false & false & false & false & true  & true  & false & true\\\\\n",
       "\t3 & feature\\_02 & false & false & true & false & false & false & false & false & false & false & false & false & true  & false & false & false & true\\\\\n",
       "\t4 & feature\\_03 & false & false & true & false & false & false & false & false & false & false & false & false & false & true  & false & false & true\\\\\n",
       "\t5 & feature\\_04 & false & false & true & false & false & false & false & false & false & false & false & false & true  & true  & false & false & true\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 5 × 18\n",
       "\n",
       "| <!--/--> | feature &lt;chr&gt; | tag_0 &lt;chr&gt; | tag_1 &lt;chr&gt; | tag_2 &lt;chr&gt; | tag_3 &lt;chr&gt; | tag_4 &lt;chr&gt; | tag_5 &lt;chr&gt; | tag_6 &lt;chr&gt; | tag_7 &lt;chr&gt; | tag_8 &lt;chr&gt; | tag_9 &lt;chr&gt; | tag_10 &lt;chr&gt; | tag_11 &lt;chr&gt; | tag_12 &lt;chr&gt; | tag_13 &lt;chr&gt; | tag_14 &lt;chr&gt; | tag_15 &lt;chr&gt; | tag_16 &lt;chr&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | feature_00 | false | false | true | false | false | false | false | false | false | false | false | false | false | false | true  | false | true |\n",
       "| 2 | feature_01 | false | false | true | false | false | false | false | false | false | false | false | false | false | true  | true  | false | true |\n",
       "| 3 | feature_02 | false | false | true | false | false | false | false | false | false | false | false | false | true  | false | false | false | true |\n",
       "| 4 | feature_03 | false | false | true | false | false | false | false | false | false | false | false | false | false | true  | false | false | true |\n",
       "| 5 | feature_04 | false | false | true | false | false | false | false | false | false | false | false | false | true  | true  | false | false | true |\n",
       "\n"
      ],
      "text/plain": [
       "  feature    tag_0 tag_1 tag_2 tag_3 tag_4 tag_5 tag_6 tag_7 tag_8 tag_9 tag_10\n",
       "1 feature_00 false false true  false false false false false false false false \n",
       "2 feature_01 false false true  false false false false false false false false \n",
       "3 feature_02 false false true  false false false false false false false false \n",
       "4 feature_03 false false true  false false false false false false false false \n",
       "5 feature_04 false false true  false false false false false false false false \n",
       "  tag_11 tag_12 tag_13 tag_14 tag_15 tag_16\n",
       "1 false  false  false  true   false  true  \n",
       "2 false  false  true   true   false  true  \n",
       "3 false  true   false  false  false  true  \n",
       "4 false  false  true   false  false  true  \n",
       "5 false  true   true   false  false  true  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 2: Number and percentage of missing values (NA) in each column:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 18 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>column</th><th scope=col>na_count</th><th scope=col>na_percentage</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>feature</th><td>feature</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_0</th><td>tag_0  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_1</th><td>tag_1  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_2</th><td>tag_2  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_3</th><td>tag_3  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_4</th><td>tag_4  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_5</th><td>tag_5  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_6</th><td>tag_6  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_7</th><td>tag_7  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_8</th><td>tag_8  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_9</th><td>tag_9  </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_10</th><td>tag_10 </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_11</th><td>tag_11 </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_12</th><td>tag_12 </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_13</th><td>tag_13 </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_14</th><td>tag_14 </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_15</th><td>tag_15 </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_16</th><td>tag_16 </td><td>0</td><td>0</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 18 × 3\n",
       "\\begin{tabular}{r|lll}\n",
       "  & column & na\\_count & na\\_percentage\\\\\n",
       "  & <chr> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\tfeature & feature & 0 & 0\\\\\n",
       "\ttag\\_0 & tag\\_0   & 0 & 0\\\\\n",
       "\ttag\\_1 & tag\\_1   & 0 & 0\\\\\n",
       "\ttag\\_2 & tag\\_2   & 0 & 0\\\\\n",
       "\ttag\\_3 & tag\\_3   & 0 & 0\\\\\n",
       "\ttag\\_4 & tag\\_4   & 0 & 0\\\\\n",
       "\ttag\\_5 & tag\\_5   & 0 & 0\\\\\n",
       "\ttag\\_6 & tag\\_6   & 0 & 0\\\\\n",
       "\ttag\\_7 & tag\\_7   & 0 & 0\\\\\n",
       "\ttag\\_8 & tag\\_8   & 0 & 0\\\\\n",
       "\ttag\\_9 & tag\\_9   & 0 & 0\\\\\n",
       "\ttag\\_10 & tag\\_10  & 0 & 0\\\\\n",
       "\ttag\\_11 & tag\\_11  & 0 & 0\\\\\n",
       "\ttag\\_12 & tag\\_12  & 0 & 0\\\\\n",
       "\ttag\\_13 & tag\\_13  & 0 & 0\\\\\n",
       "\ttag\\_14 & tag\\_14  & 0 & 0\\\\\n",
       "\ttag\\_15 & tag\\_15  & 0 & 0\\\\\n",
       "\ttag\\_16 & tag\\_16  & 0 & 0\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 18 × 3\n",
       "\n",
       "| <!--/--> | column &lt;chr&gt; | na_count &lt;dbl&gt; | na_percentage &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| feature | feature | 0 | 0 |\n",
       "| tag_0 | tag_0   | 0 | 0 |\n",
       "| tag_1 | tag_1   | 0 | 0 |\n",
       "| tag_2 | tag_2   | 0 | 0 |\n",
       "| tag_3 | tag_3   | 0 | 0 |\n",
       "| tag_4 | tag_4   | 0 | 0 |\n",
       "| tag_5 | tag_5   | 0 | 0 |\n",
       "| tag_6 | tag_6   | 0 | 0 |\n",
       "| tag_7 | tag_7   | 0 | 0 |\n",
       "| tag_8 | tag_8   | 0 | 0 |\n",
       "| tag_9 | tag_9   | 0 | 0 |\n",
       "| tag_10 | tag_10  | 0 | 0 |\n",
       "| tag_11 | tag_11  | 0 | 0 |\n",
       "| tag_12 | tag_12  | 0 | 0 |\n",
       "| tag_13 | tag_13  | 0 | 0 |\n",
       "| tag_14 | tag_14  | 0 | 0 |\n",
       "| tag_15 | tag_15  | 0 | 0 |\n",
       "| tag_16 | tag_16  | 0 | 0 |\n",
       "\n"
      ],
      "text/plain": [
       "        column  na_count na_percentage\n",
       "feature feature 0        0            \n",
       "tag_0   tag_0   0        0            \n",
       "tag_1   tag_1   0        0            \n",
       "tag_2   tag_2   0        0            \n",
       "tag_3   tag_3   0        0            \n",
       "tag_4   tag_4   0        0            \n",
       "tag_5   tag_5   0        0            \n",
       "tag_6   tag_6   0        0            \n",
       "tag_7   tag_7   0        0            \n",
       "tag_8   tag_8   0        0            \n",
       "tag_9   tag_9   0        0            \n",
       "tag_10  tag_10  0        0            \n",
       "tag_11  tag_11  0        0            \n",
       "tag_12  tag_12  0        0            \n",
       "tag_13  tag_13  0        0            \n",
       "tag_14  tag_14  0        0            \n",
       "tag_15  tag_15  0        0            \n",
       "tag_16  tag_16  0        0            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 3: Structure of the dataset after converting to logical:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t79 obs. of  18 variables:\n",
      " $ feature: chr  \"feature_00\" \"feature_01\" \"feature_02\" \"feature_03\" ...\n",
      " $ tag_0  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_1  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_2  : logi  TRUE TRUE TRUE TRUE TRUE FALSE ...\n",
      " $ tag_3  : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...\n",
      " $ tag_4  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_5  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_6  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_7  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_8  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_9  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_10 : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_11 : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_12 : logi  FALSE FALSE TRUE FALSE TRUE FALSE ...\n",
      " $ tag_13 : logi  FALSE TRUE FALSE TRUE TRUE FALSE ...\n",
      " $ tag_14 : logi  TRUE TRUE FALSE FALSE FALSE TRUE ...\n",
      " $ tag_15 : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n",
      " $ tag_16 : logi  TRUE TRUE TRUE TRUE TRUE TRUE ...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[22m`summarise()` has grouped output by 'feature'. You can override using the\n",
      "`.groups` argument.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 4: Percentage table of TRUE and FALSE values for each feature-tag combination:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 5 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>feature</th><th scope=col>tag</th><th scope=col>true_percentage</th><th scope=col>false_percentage</th></tr>\n",
       "\t<tr><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>feature_00</td><td>tag_0 </td><td>0</td><td>100</td></tr>\n",
       "\t<tr><td>feature_00</td><td>tag_1 </td><td>0</td><td>100</td></tr>\n",
       "\t<tr><td>feature_00</td><td>tag_10</td><td>0</td><td>100</td></tr>\n",
       "\t<tr><td>feature_00</td><td>tag_11</td><td>0</td><td>100</td></tr>\n",
       "\t<tr><td>feature_00</td><td>tag_12</td><td>0</td><td>100</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 5 × 4\n",
       "\\begin{tabular}{llll}\n",
       " feature & tag & true\\_percentage & false\\_percentage\\\\\n",
       " <chr> & <chr> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t feature\\_00 & tag\\_0  & 0 & 100\\\\\n",
       "\t feature\\_00 & tag\\_1  & 0 & 100\\\\\n",
       "\t feature\\_00 & tag\\_10 & 0 & 100\\\\\n",
       "\t feature\\_00 & tag\\_11 & 0 & 100\\\\\n",
       "\t feature\\_00 & tag\\_12 & 0 & 100\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 5 × 4\n",
       "\n",
       "| feature &lt;chr&gt; | tag &lt;chr&gt; | true_percentage &lt;dbl&gt; | false_percentage &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| feature_00 | tag_0  | 0 | 100 |\n",
       "| feature_00 | tag_1  | 0 | 100 |\n",
       "| feature_00 | tag_10 | 0 | 100 |\n",
       "| feature_00 | tag_11 | 0 | 100 |\n",
       "| feature_00 | tag_12 | 0 | 100 |\n",
       "\n"
      ],
      "text/plain": [
       "  feature    tag    true_percentage false_percentage\n",
       "1 feature_00 tag_0  0               100             \n",
       "2 feature_00 tag_1  0               100             \n",
       "3 feature_00 tag_10 0               100             \n",
       "4 feature_00 tag_11 0               100             \n",
       "5 feature_00 tag_12 0               100             "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 5: Generating the True-False Heatmap for Features...\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nMoMug4j4Ir/mzZsTkcitlobjXII6N2/eXM5neMJnp7WDZQwR+QgLHFCeyLtziDvxZQO7vqI2\nsJqsA9FDx327auOxM5fTddWJyMCx8tBmpg8J8hazOiURMbwn76VlGElEiFyT+XfhlRqX2bRp\nU4srTWFJJBBcWvFV/kpDeEREFpdpXCBf5GdcZvPmzY0rJSKLKzVbZsTwyR+FuxPDt7hMlxCv\nWLXedKVB3mJWmyyu1M7iSnFAcUBxQHFAcUBf5ICaPcR4QAkcAlfFWqe5XPzPw22Z+sbGjrRG\nlULq9BxWp748+cPfbgd1f/+zrr7LRr1zz61VY+6/c6xk8vQZkoJXD4WIeAnajFnz/1g1q0f+\nFwb0e3KOukrL3t/Xa7hy4dw/LmcQ34uowK9rHTwkR1NvEjWKDHFdnvDrbWWLmjIBEaUYGCLa\ndC/bdDBnyN0clyOWt+n3/qSrf/eOMfiEiNIP79p4eNeTAXyGl5twnujV/If89zBPKPHTKhNY\n1T+Z+l7GZd5MVTECD/OVvjmyyrap99xaffbZ5PmD+hZe6cR+vRJltXWZ1/JX6i0TUY7W4jIV\nBvMzx8Wv1AxnyN1+Xylxb1tLd6LwMrOv36wpFd4xWel/D/OE0pq63PNEVHilOKA4oDigOKA4\noC9yQInCTccbD2jhHLAH/uzZs8t6Ds4kxP3u7n8uHD5738vX39/PQ2By3bhbaNDvWw/JK1e+\nu/1/B2KzGg6d0j8wZt+lG6ceUP06YZWkz/bQ8mt/nU5WKh9fvJTr0bph9Tt7tl3J033x+Sf5\nA/hij1oh4t0HznGkJCJWn52Ulhx377ZAUjmiK3vs1GE2/PVur/vu+uP4kUNXXPwC+ff//Pbw\nNZmr6+0j51ldhkBas29UE03mnV+//uzkfUWDoZPbhbn7p//z142HAe2GDH2zubtQm/g4RccS\ny3E65c374qotwoN4DF3787tlf9+WygxajZbYzMNn73v6eCb+t+GnE7e96o/q0SH0yUqr+P++\n7Ygu8b9rSTkNh05pV9PdP/d04ZW6XD3wd3xCw7o+9y6fMK40Yf+OK3m66Ojowsvcf/yWLjeJ\nMyg4Qy7xpP7evIDAtGJWqtNqGUFQ/94tich0pf09Lxdepk5xuXZd7zv3zhlXev3Ad8v+vu3X\nakjmXytupKqLWikOKA4oDigOKA5o6Q6oIaTFKyGVjM9rXKZf67FvtfQnsD+8x85a3F8/z/xx\n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\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC\n7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGBC7AAAJsQOAGAi\n9c56mwPdi4UAAAAASUVORK5CYII="
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load required libraries\n",
    "library(dplyr)\n",
    "library(tidyr)\n",
    "library(ggplot2)\n",
    "\n",
    "# Step 1: Load the features.csv file\n",
    "features <- read.csv(\"../input/jane-street-real-time-market-data-forecasting/features.csv\")\n",
    "\n",
    "# Display the dimensions\n",
    "cat(\"Step 1: Dimensions of the dataset (rows, columns):\", dim(features), \"\\n\")\n",
    "\n",
    "# Display the first 5 rows\n",
    "cat(\"First 5 rows of the dataset:\\n\")\n",
    "head(features, 5)\n",
    "\n",
    "# Step 2: Check for null values (NA) in each column\n",
    "cat(\"\\nStep 2: Number and percentage of missing values (NA) in each column:\\n\")\n",
    "na_info <- data.frame(\n",
    "  column = colnames(features),\n",
    "  na_count = colSums(is.na(features)),  # Number of missing values\n",
    "  na_percentage = colSums(is.na(features)) / nrow(features) * 100  # Percentage of missing values\n",
    ")\n",
    "na_info\n",
    "\n",
    "# Step 3: Convert \"true\"/\"false\" to logical TRUE/FALSE\n",
    "features <- features %>%\n",
    "  mutate(across(starts_with(\"tag\"), ~ . == \"true\"))\n",
    "\n",
    "# Display structure after conversion\n",
    "cat(\"\\nStep 3: Structure of the dataset after converting to logical:\\n\")\n",
    "str(features)\n",
    "\n",
    "# Step 4: Create the percentage table for TRUE/FALSE\n",
    "percentages_table <- features %>%\n",
    "  pivot_longer(cols = starts_with(\"tag\"), names_to = \"tag\", values_to = \"value\") %>%\n",
    "  group_by(feature, tag) %>%  # Group by feature and tag\n",
    "  summarise(\n",
    "    true_percentage = mean(value, na.rm = TRUE) * 100,   # Percentage of TRUE\n",
    "    false_percentage = (1 - mean(value, na.rm = TRUE)) * 100  # Percentage of FALSE\n",
    "  ) %>%\n",
    "  ungroup()\n",
    "\n",
    "# Display the percentage table\n",
    "cat(\"\\nStep 4: Percentage table of TRUE and FALSE values for each feature-tag combination:\\n\")\n",
    "head(percentages_table, 5)\n",
    "\n",
    "# Step 5: Create the heatmap plot\n",
    "cat(\"\\nStep 5: Generating the True-False Heatmap for Features...\\n\")\n",
    "ggplot(percentages_table, aes(x = feature, y = tag, fill = true_percentage > 50)) +\n",
    "  geom_tile(color = \"black\") +\n",
    "  scale_fill_manual(values = c(\"red\", \"green\"), labels = c(\"FALSE\", \"TRUE\"), name = \"Value\") +\n",
    "  labs(x = \"Features\", y = \"Tags\", title = \"True-False Heatmap for Features\") +\n",
    "  theme_minimal() +\n",
    "  theme(\n",
    "    axis.text.x = element_text(angle = 90, vjust = 0.5, size = 12),  # Rotate x-axis labels for readability\n",
    "    axis.text.y = element_text(size = 12),                           # Increase y-axis text size\n",
    "    axis.title = element_text(size = 15),                            # Increase axis title size\n",
    "    plot.title = element_text(size = 18, face = \"bold\"),             # Increase plot title size\n",
    "    plot.margin = margin(1, 1, 1, 1)                                 # Add margins\n",
    "  ) +\n",
    "  coord_fixed(ratio = 1.5)  # Maintain aspect ratio\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29df5a07",
   "metadata": {
    "papermill": {
     "duration": 0.006964,
     "end_time": "2025-01-04T09:08:11.837605",
     "exception": false,
     "start_time": "2025-01-04T09:08:11.830641",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Responders.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8e1e12a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-04T09:08:11.855497Z",
     "iopub.status.busy": "2025-01-04T09:08:11.853790Z",
     "iopub.status.idle": "2025-01-04T09:08:12.529973Z",
     "shell.execute_reply": "2025-01-04T09:08:12.527998Z"
    },
    "papermill": {
     "duration": 0.688192,
     "end_time": "2025-01-04T09:08:12.532963",
     "exception": false,
     "start_time": "2025-01-04T09:08:11.844771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step 1: Dimensions of the dataset (rows, columns): 9 6 \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 5 rows of the dataset:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 5 × 6</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>responder</th><th scope=col>tag_0</th><th scope=col>tag_1</th><th scope=col>tag_2</th><th scope=col>tag_3</th><th scope=col>tag_4</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>responder_0</td><td>true </td><td>false</td><td>true </td><td>false</td><td>false</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>responder_1</td><td>true </td><td>false</td><td>false</td><td>true </td><td>false</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>responder_2</td><td>true </td><td>true </td><td>false</td><td>false</td><td>false</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>responder_3</td><td>false</td><td>false</td><td>true </td><td>false</td><td>true </td></tr>\n",
       "\t<tr><th scope=row>5</th><td>responder_4</td><td>false</td><td>false</td><td>false</td><td>true </td><td>true </td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 5 × 6\n",
       "\\begin{tabular}{r|llllll}\n",
       "  & responder & tag\\_0 & tag\\_1 & tag\\_2 & tag\\_3 & tag\\_4\\\\\n",
       "  & <chr> & <chr> & <chr> & <chr> & <chr> & <chr>\\\\\n",
       "\\hline\n",
       "\t1 & responder\\_0 & true  & false & true  & false & false\\\\\n",
       "\t2 & responder\\_1 & true  & false & false & true  & false\\\\\n",
       "\t3 & responder\\_2 & true  & true  & false & false & false\\\\\n",
       "\t4 & responder\\_3 & false & false & true  & false & true \\\\\n",
       "\t5 & responder\\_4 & false & false & false & true  & true \\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 5 × 6\n",
       "\n",
       "| <!--/--> | responder &lt;chr&gt; | tag_0 &lt;chr&gt; | tag_1 &lt;chr&gt; | tag_2 &lt;chr&gt; | tag_3 &lt;chr&gt; | tag_4 &lt;chr&gt; |\n",
       "|---|---|---|---|---|---|---|\n",
       "| 1 | responder_0 | true  | false | true  | false | false |\n",
       "| 2 | responder_1 | true  | false | false | true  | false |\n",
       "| 3 | responder_2 | true  | true  | false | false | false |\n",
       "| 4 | responder_3 | false | false | true  | false | true  |\n",
       "| 5 | responder_4 | false | false | false | true  | true  |\n",
       "\n"
      ],
      "text/plain": [
       "  responder   tag_0 tag_1 tag_2 tag_3 tag_4\n",
       "1 responder_0 true  false true  false false\n",
       "2 responder_1 true  false false true  false\n",
       "3 responder_2 true  true  false false false\n",
       "4 responder_3 false false true  false true \n",
       "5 responder_4 false false false true  true "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 2: Number and percentage of missing values (NA) in each column:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 6 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>column</th><th scope=col>na_count</th><th scope=col>na_percentage</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>responder</th><td>responder</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_0</th><td>tag_0    </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_1</th><td>tag_1    </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_2</th><td>tag_2    </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_3</th><td>tag_3    </td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>tag_4</th><td>tag_4    </td><td>0</td><td>0</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 3\n",
       "\\begin{tabular}{r|lll}\n",
       "  & column & na\\_count & na\\_percentage\\\\\n",
       "  & <chr> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\tresponder & responder & 0 & 0\\\\\n",
       "\ttag\\_0 & tag\\_0     & 0 & 0\\\\\n",
       "\ttag\\_1 & tag\\_1     & 0 & 0\\\\\n",
       "\ttag\\_2 & tag\\_2     & 0 & 0\\\\\n",
       "\ttag\\_3 & tag\\_3     & 0 & 0\\\\\n",
       "\ttag\\_4 & tag\\_4     & 0 & 0\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 3\n",
       "\n",
       "| <!--/--> | column &lt;chr&gt; | na_count &lt;dbl&gt; | na_percentage &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| responder | responder | 0 | 0 |\n",
       "| tag_0 | tag_0     | 0 | 0 |\n",
       "| tag_1 | tag_1     | 0 | 0 |\n",
       "| tag_2 | tag_2     | 0 | 0 |\n",
       "| tag_3 | tag_3     | 0 | 0 |\n",
       "| tag_4 | tag_4     | 0 | 0 |\n",
       "\n"
      ],
      "text/plain": [
       "          column    na_count na_percentage\n",
       "responder responder 0        0            \n",
       "tag_0     tag_0     0        0            \n",
       "tag_1     tag_1     0        0            \n",
       "tag_2     tag_2     0        0            \n",
       "tag_3     tag_3     0        0            \n",
       "tag_4     tag_4     0        0            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 3: Structure of the dataset after converting to logical:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t9 obs. of  6 variables:\n",
      " $ responder: chr  \"responder_0\" \"responder_1\" \"responder_2\" \"responder_3\" ...\n",
      " $ tag_0    : logi  TRUE TRUE TRUE FALSE FALSE FALSE ...\n",
      " $ tag_1    : logi  FALSE FALSE TRUE FALSE FALSE TRUE ...\n",
      " $ tag_2    : logi  TRUE FALSE FALSE TRUE FALSE FALSE ...\n",
      " $ tag_3    : logi  FALSE TRUE FALSE FALSE TRUE FALSE ...\n",
      " $ tag_4    : logi  FALSE FALSE FALSE TRUE TRUE TRUE ...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[22m`summarise()` has grouped output by 'responder'. You can override using the\n",
      "`.groups` argument.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 4: Percentage table of TRUE and FALSE values for each responder-tag combination:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 5 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>responder</th><th scope=col>tag</th><th scope=col>true_percentage</th><th scope=col>false_percentage</th></tr>\n",
       "\t<tr><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>responder_0</td><td>tag_0</td><td>100</td><td>  0</td></tr>\n",
       "\t<tr><td>responder_0</td><td>tag_1</td><td>  0</td><td>100</td></tr>\n",
       "\t<tr><td>responder_0</td><td>tag_2</td><td>100</td><td>  0</td></tr>\n",
       "\t<tr><td>responder_0</td><td>tag_3</td><td>  0</td><td>100</td></tr>\n",
       "\t<tr><td>responder_0</td><td>tag_4</td><td>  0</td><td>100</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 5 × 4\n",
       "\\begin{tabular}{llll}\n",
       " responder & tag & true\\_percentage & false\\_percentage\\\\\n",
       " <chr> & <chr> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t responder\\_0 & tag\\_0 & 100 &   0\\\\\n",
       "\t responder\\_0 & tag\\_1 &   0 & 100\\\\\n",
       "\t responder\\_0 & tag\\_2 & 100 &   0\\\\\n",
       "\t responder\\_0 & tag\\_3 &   0 & 100\\\\\n",
       "\t responder\\_0 & tag\\_4 &   0 & 100\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 5 × 4\n",
       "\n",
       "| responder &lt;chr&gt; | tag &lt;chr&gt; | true_percentage &lt;dbl&gt; | false_percentage &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| responder_0 | tag_0 | 100 |   0 |\n",
       "| responder_0 | tag_1 |   0 | 100 |\n",
       "| responder_0 | tag_2 | 100 |   0 |\n",
       "| responder_0 | tag_3 |   0 | 100 |\n",
       "| responder_0 | tag_4 |   0 | 100 |\n",
       "\n"
      ],
      "text/plain": [
       "  responder   tag   true_percentage false_percentage\n",
       "1 responder_0 tag_0 100               0             \n",
       "2 responder_0 tag_1   0             100             \n",
       "3 responder_0 tag_2 100               0             \n",
       "4 responder_0 tag_3   0             100             \n",
       "5 responder_0 tag_4   0             100             "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Step 5: Generating the True-False Heatmap for Responders...\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nqDKgXZRfoe2+FVoMjA5MO7xYk6lKhixyIoucyCInskDXKHbaS/Z47WHhl7yrXJjN604q43lK\ngyxyIoucyCInskDXKHbaa+bvk7Z/5aXOYVF/2ZtmdTQs84lKjixyIoucyCInskDXKHba69G1\nujNl1X9nrnAWPENZ9aybP2ZVirPyHT21G63YyCInssiJLHIiC3SNy51oT/VmTX1x0JI9KbaQ\nyjUrZOzYndqpY9sjOzfsic9yVGr10Ucjwiy66d9kkRNZ5EQWOZEFukaxk4Lqda5aMOvbZauP\nnM7M2+ITEN6y472PP9q1nEVnV5Eki5zIIieyyIks0C+KncZUT+qMzxeE1I+5/9ZwIUR6UmJK\nutPqCKhQPkR3/+DIIieyyIksciIL9I6PFNOYYg7atGxJzpEmef/wAsqFB5TTeqaSIoucyCIn\nssiJLNA7XlzX3rPdGyTvnn4sx6P1INcAWeREFjmRRU5kga6Zx4wZo/UM17uwRh2ivHsnfrJU\n8fO1mhR3rjPzQn5+ha8tKS2yyIksciKLnMgCXeM9dtq77777hBCq1+u9zPciNja2bCcqObLI\niSxyIoucyAJd4z122uvUqZPWI1wzZJETWeREFjmRBbrGETsAAACD4OQJAAAAg6DYAQAAGATF\nDgAAwCAodgAAAAZBsQMAADAIih0AAIBBUOyA687SlpWUy7D7BUXVadrzyVdX7UvTekxt/DO2\nmaIo0Xev0HoQACgJih2A83Ky0uL2/r1g2rjb60ePWnpM63EAAMVDsQOuU0HRYxIKiT++b8fG\n2ZOeLW81e90p47u3Pejks8MBQE/4SDHgOqWYAytUqFBoY4WISjXrN2td9WT1B+a7nYeeXRsf\ne0ekJuMBAEqAI3YACqva7bNgi0kIcSA2rmz2mJPl9FzzTzf0ZmfnuK/1kxZzBFdKosur7QwA\nrisUOwCFKeaAeg6rECI3KfeCO9ScH6aMubd1owrlAuxB4Q2athw2bsbBdFehh6ve7G8/Hn1X\n6xvDggMsVt+wSjXv7Dn0279PF1yzrH2koij37zpzZNXU9o2j7X6+VrNPWKWqd/Ue+v3WMxeP\n5Mo48N5LA1vWrxbib/MLCqvdtP0zr02Pz72gM2Ucf0dRlJAa76qe1A+f6lY5MMhht1rs/tEN\nbnlm/NxMb+HmeGbbD0N731W1UpjNxy+y+g2PDn9zX0bhLMUKnnbkVUVRytWaIoTYu/jd2+pX\n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\nAAAG8X/XP9o1XTn9sAAAAABJRU5ErkJggg=="
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load required libraries\n",
    "library(dplyr)\n",
    "library(tidyr)\n",
    "library(ggplot2)\n",
    "\n",
    "# Step 1: Load the responders.csv file\n",
    "responders <- read.csv(\"../input/jane-street-real-time-market-data-forecasting/responders.csv\")\n",
    "\n",
    "# Display the dimensions\n",
    "cat(\"Step 1: Dimensions of the dataset (rows, columns):\", dim(responders), \"\\n\")\n",
    "\n",
    "# Display the first 5 rows\n",
    "cat(\"First 5 rows of the dataset:\\n\")\n",
    "head(responders, 5)\n",
    "\n",
    "# Step 2: Check for null values (NA) in each column\n",
    "cat(\"\\nStep 2: Number and percentage of missing values (NA) in each column:\\n\")\n",
    "na_info <- data.frame(\n",
    "  column = colnames(responders),\n",
    "  na_count = colSums(is.na(responders)),  # Number of missing values\n",
    "  na_percentage = colSums(is.na(responders)) / nrow(responders) * 100  # Percentage of missing values\n",
    ")\n",
    "na_info\n",
    "\n",
    "# Step 3: Convert \"true\"/\"false\" to logical TRUE/FALSE\n",
    "responders <- responders %>%\n",
    "  mutate(across(starts_with(\"tag\"), ~ . == \"true\"))\n",
    "\n",
    "# Display structure after conversion\n",
    "cat(\"\\nStep 3: Structure of the dataset after converting to logical:\\n\")\n",
    "str(responders)\n",
    "\n",
    "# Step 4: Create the percentage table for TRUE/FALSE\n",
    "percentages_table <- responders %>%\n",
    "  pivot_longer(cols = starts_with(\"tag\"), names_to = \"tag\", values_to = \"value\") %>%\n",
    "  group_by(responder, tag) %>%  # Group by responder and tag\n",
    "  summarise(\n",
    "    true_percentage = mean(value, na.rm = TRUE) * 100,   # Percentage of TRUE\n",
    "    false_percentage = (1 - mean(value, na.rm = TRUE)) * 100  # Percentage of FALSE\n",
    "  ) %>%\n",
    "  ungroup()\n",
    "\n",
    "# Display the percentage table\n",
    "cat(\"\\nStep 4: Percentage table of TRUE and FALSE values for each responder-tag combination:\\n\")\n",
    "head(percentages_table,5)\n",
    "\n",
    "# Step 5: Create the heatmap plot\n",
    "cat(\"\\nStep 5: Generating the True-False Heatmap for Responders...\\n\")\n",
    "ggplot(percentages_table, aes(x = responder, y = tag, fill = true_percentage > 50)) +\n",
    "  geom_tile(color = \"black\") +\n",
    "  scale_fill_manual(values = c(\"red\", \"green\"), labels = c(\"FALSE\", \"TRUE\"), name = \"Value\") +\n",
    "  labs(x = \"Responders\", y = \"Tags\", title = \"True-False Heatmap for Responders\") +\n",
    "  theme_minimal() +\n",
    "  theme(\n",
    "    axis.text.x = element_text(angle = 90, vjust = 0.5, size = 12),  # Rotate x-axis labels for readability\n",
    "    axis.text.y = element_text(size = 12),                           # Increase y-axis text size\n",
    "    axis.title = element_text(size = 15),                            # Increase axis title size\n",
    "    plot.title = element_text(size = 18, face = \"bold\"),             # Increase plot title size\n",
    "    plot.margin = margin(1, 1, 1, 1)                                 # Add margins\n",
    "  ) +\n",
    "  coord_fixed(ratio = 1.5)  # Maintain aspect ratio\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42737a8f",
   "metadata": {
    "papermill": {
     "duration": 0.007784,
     "end_time": "2025-01-04T09:08:12.548821",
     "exception": false,
     "start_time": "2025-01-04T09:08:12.541037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27264ba9",
   "metadata": {
    "papermill": {
     "duration": 0.007983,
     "end_time": "2025-01-04T09:08:12.564636",
     "exception": false,
     "start_time": "2025-01-04T09:08:12.556653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9871156,
     "sourceId": 84493,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30749,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "r",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.4.0"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.185772,
   "end_time": "2025-01-04T09:08:12.694400",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-04T09:08:05.508628",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
